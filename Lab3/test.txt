public static List<List<Integer>> alternatingParityPermutations(int n) {
    // Write your code here
        int[] nums = new int[n];
        for(int i=0;i<n;i++){
            nums[i] = i+1;
        }
        List<List<Integer>>res = new ArrayList<>();
        if(n == 0)return res;
        List<Integer>list = new ArrayList<>();
        
        if (n%2 == 1) dfs(nums, list, res, 1);
        else dfs(nums,list,res, 2);
         return res;
        
    }
    private static void dfs(int[] nums,List<Integer>list,List<List<Integer>>res, int mode){
        if(list.size() == nums.length){
            res.add(new ArrayList<>(list));
            return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(list.contains(nums[i]))continue;
            if (mode != 2 && (nums[i]%2) != mode) continue;
            list.add(nums[i]);
            if (nums[i]%2 == 1)
            	dfs(nums,list,res, 0);
            else dfs(nums, list, res, 1)
            list.remove(list.size()-1);
        }
    }

}